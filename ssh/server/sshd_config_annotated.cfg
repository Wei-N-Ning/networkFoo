#	$OpenBSD: sshd_config,v 1.101 2017/03/14 07:19:07 djm Exp $

# This is the sshd server system-wide configuration file.  See
# sshd_config(5) for more information.

# This sshd was compiled with PATH=/usr/bin:/bin:/usr/sbin:/sbin

# The strategy used for options in the default sshd_config shipped with
# OpenSSH is to specify options with their default value where
# possible, but leave them commented.  Uncommented options override the
# default value.

# // source: SSH definitive 2nd P135/156
# // to validate sshd config file, do:
# // sudo /usr/sbin/sshd -t -f ./sshd_config_annotated.cfg
# // or /usr/sbin/sshd -t -h <host_key_file> -f ./sshd_config_annotated.cfg
# // for example, uncomment the line below and this command 
# // will fail with the cause of error
# // more details: -ddd
#thereisacow

# // source: SSH definitive 2nd P138/158
# // to pass inline option (config key=value pair) to sshd
# // sshd -o 'Port 2222'
# // or 'Port = 2222'
# // or Port=2222
# // you can repeat the -o option to set values for multiple 
# // keywords on the same command line
# // note that command line option takes priority even if the 
# // server is restarted via systemctl
# // ==recommended==
Port 22
#AddressFamily any

# // source: SSH definitive 2nd P148/168
# // for even more precise control, you can also specify the 
# // port for listening on a given interface.
# // 0.0.0.0:32345
# // ==recommended==
ListenAddress 0.0.0.0
#ListenAddress ::

#HostKey /etc/ssh/ssh_host_rsa_key
#HostKey /etc/ssh/ssh_host_ecdsa_key
#HostKey /etc/ssh/ssh_host_ed25519_key

# Ciphers and keying
#RekeyLimit default none

# Logging

# // SSH definitive 2nd P/230
# // this specifies how the ssh server tags log messages
# // syslog is the standard unix logging service
# // programs send their log messages to the syslog daemon, 
# // syslogd, which forwards them to other destinations such 
# // as files, the system console or even other machines.
# // destinations are specified in the syslog configuration 
# // file, /etc/syslog.conf

# // the keyword specifies how the SSH server tags log messages
# // default is AUTH
# // because on ubuntu, rsyslog is the actual log daemon,
# // the log dest is (in rsyslog.d/50-) 
# // auth,authpriv.*                 /var/log/auth.log
#SyslogFacility AUTH

# // QUIET, FATAL, ERROR, INFO, VERBOSE, DEBUG (aka DEBUG1)
# // DEBUG1 - DEBUG3
# // debugging output is usually requested on the command line
# // ../sshd -o LogLevel=DEBUG2
# // or enable debug mode: ../sshd -ddd 
# // or combined with test flag: ../sshd -t -ddd
#LogLevel INFO

# // P/233
# // /usr/sbin/sshd -p 2222 -d -r
# // when debugging openssh, it is ususally a good idea to disable
# // server restarts with -r, to confine all activity to a single 
# // process for simplicity and to prevent debug output from being
# // diverted from stderr to syslog after the restart

# Authentication:

# // source SSH definitive 2nd P156/176
# // handle failed logins
# // ==recommended== (30sec)
LoginGraceTime 30
#MaxAuthTries 6

# ==recommended==
# redundant since password is disabled.
PermitRootLogin prohibit-password

# // SSH definitive 2nd P146/166
# // ==recommended==
# // causes sshd to check the permissions of important files 
# // and directories. They must be owned by the account owner 
# // or by root, and group and world write permission must be 
# // disabled. For OpenSSH, StrictModes checks:
# // The user’s home directory
# // The user’s ~/.rhosts and ~/.shosts file
# // The user’s SSH configuration directory, ~/.ssh
# // The user’s SSH ~/.ssh/authorized_keys file
# // The user and system “known hosts” files
# // if any check fails the server rejects SSH connection
# // attempts to the account
# // we strongly suggest you leave these checks enabled.
StrictModes yes

#MaxSessions 10

# // ==recommended==
PubkeyAuthentication yes

# // SSH definitive 2nd P/165
# // filename can be absolute or are relative to the user's ${HOME}
# // special symbols:
# // %h: home dir, %u: username, %%: percent sign
# Expect .ssh/authorized_keys2 to be disregarded by default in future.
#AuthorizedKeysFile	.ssh/authorized_keys .ssh/authorized_keys2

#AuthorizedPrincipalsFile none

#AuthorizedKeysCommand none
#AuthorizedKeysCommandUser nobody

# For this to work you will also need host keys in /etc/ssh/ssh_known_hosts
#HostbasedAuthentication no
# Change to yes if you don't trust ~/.ssh/known_hosts for
# HostbasedAuthentication
#IgnoreUserKnownHosts no
# Don't read the user's ~/.rhosts and ~/.shosts files
# // ==recommended==
IgnoreRhosts yes
IgnoreRootRhosts yes

# To disable tunneled clear text passwords, change to no here!
# // SSH definitive 2nd P/193
# // usually this is the ordinary password, but can be changed by PAM
# // ==recommended==
PasswordAuthentication no
# // this has no effect if password is disabled
PermitEmptyPasswords no

# Change to yes to enable challenge-response passwords (beware issues with
# some PAM modules and threads)
# // SSH definitive 2nd P/203
# // PAM: pluggable authentication modules
ChallengeResponseAuthentication no

# Kerberos options
#KerberosAuthentication no
#KerberosOrLocalPasswd yes
#KerberosTicketCleanup yes
#KerberosGetAFSToken no

# GSSAPI options
#GSSAPIAuthentication no
#GSSAPICleanupCredentials yes
#GSSAPIStrictAcceptorCheck yes
#GSSAPIKeyExchange no

# Set this to 'yes' to enable PAM authentication, account processing,
# and session processing. If this is enabled, PAM authentication will
# be allowed through the ChallengeResponseAuthentication and
# PasswordAuthentication.  Depending on your PAM configuration,
# PAM authentication via ChallengeResponseAuthentication may bypass
# the setting of "PermitRootLogin without-password".
# If you just want the PAM account and session checks to run without
# PAM authentication, then enable this but set PasswordAuthentication
# and ChallengeResponseAuthentication to 'no'.
UsePAM yes

# // SSH definitive 2nd P/226
# // to permit a series of SSH connections (from one machine to 
# // another, to another ...) to operate seamlessly using a 
# // single agent.
# // can also be enabled and disabled by open ssh client
# // in a security-sensitive environment it might be appropriate 
# // to disable this feature because forwarded agent connections 
# // are implemented as unix domain sockets, an attacker can 
# // conceivably gain access to them.
# // these sockets are just nodes in the filesystem, protected 
# // only by file permissions that can be compromised.
# // the attacker can't retrieve the keys themselves in this 
# // way however
#AllowAgentForwarding yes

# // SSH definitive 2nd P/221
# // default is yes, allow forwarding
# // ==recommended==
AllowTcpForwarding yes

#GatewayPorts no
X11Forwarding yes
#X11DisplayOffset 10
#X11UseLocalhost yes
#PermitTTY yes
PrintMotd no

# // SSH definitive 2nd P/219
# // this is by default yes (recommended, recall SSH mastery)
#PrintLastLog yes

# // SSH definitive 2nd P/419
# // connections to client that have crashed will terminate 
# // rather than requiring manual reaping 
# // ==recommended==
TCPKeepAlive yes
#UseLogin no

# // SSH Definitive 2nd P/219
# // The OpenSSH server grants or denies permission for clients 
# // to modify the environ- ment in this manner, using the 
# // PermitUserEnvironment and AcceptEnv keywords.
# 
# // controls whether the server pays attention to the 
# // user’s ~/.ssh/ environment file and authorized_keys files, 
# // with a value of yes or no (the default):
#PermitUserEnvironment no

#Compression delayed

# // source: SSH definitive 2nd P/174
# // ClientAliveInterval 300 
# // Send client-alive every 300 seconds, or five minutes
# // ClientAliveInterval 5m
# // Send client-alive every five minutes
# // ClientAliveCountMax 8
# // Try eight times, then give up. The default is three times.
# // If you don’t want the server to send client-alive messages, 
# // set ClientAliveInterval to zero
#ClientAliveInterval 1
#ClientAliveCountMax 3

# // source: SSH definitive 2nd P/179
# // we recommend turning off this feature; it isn’t usually 
# // worth the hassle, and you avoid long reverse-lookup delays 
# // at times when DNS is down
# // ==recommended==
UseDNS no

# // SSH definitive 2nd P143/163
# // ==recommended==
# // open ssh does not record the process ID when it runs in 
# // debug mode
# // SSH definitive 2nd P212/232
# // openssh can also be prevented from running as a daemon by 
# // using -D 
# // sshd -D
# // does not change the loglevel or others.. still forks to 
# // handle multiple client connections 
PidFile /var/run/sshd.pid

#MaxStartups 10:30:100
#PermitTunnel no
#ChrootDirectory none
#VersionAddendum none

# no default banner path
# // SSH definitive 2nd P/218
# // example:
# // Banner /usr/local/etc/warning.txt
#Banner none

# Allow client to pass locale environment variables
# // SSH definitive 2nd P219
# // AcceptEnv controls how the server accepts or rejects environment 
# // variables that are sent from the SSH client according to the 
# // SendEnv (OpenSSH)
# // The AcceptEnv keyword lists the environment variables that 
# // are accepted, either separated by whitespace or specified 
# // by multiple keywords.
AcceptEnv LANG LC_*

# // SSH definitive 2nd P/226
# // subsystems are a layer of abstraction for definition and 
# // running remote commands via SSH.
# // is a set of commands predefined on the server machine, 
# // with simple names so that they can be executed conveniently, 
# // to run this
# // ssh server.example.com -s sftp
# // subsystems are mainly a convenient feature to predefine 
# // commands for SSH clients to invoke easily. 
# // the additional level of abstraction is useful for system 
# // adminstrators who can hide (and therefore easily change) 
# // details for the subsystem commands.
# // subsystems are especially useful for tunneling other 
# // protocols. If clients refer only to a subsystem, the 
# // corresponding server impl can be changed without modifying
# // the clients, which might be numerous and widely scattered

# // P/228 subsystem commands are executed by each user's shell
# // and they can be affected by environment variables set by 
# // the user 
# // OpenSSH avoids running ~/.ssh/rc script for subsystems

# // if subsystem fails, clients fails silently, and the server 
# // emits syslog warnings

# // open ssh does not permit command-line arguments for 
# // subsystem commands

# // do not use shell meta characters (sh's 2>&1 e.g.)
# // a better approach is to wrap the details in a separate 
# // script (subsystem)

# override default of no subsystems

Subsystem	sftp	/usr/lib/openssh/sftp-server
# // see subsystem.sh
Subsystem thereisacow /var/tmp/thereisacow

# Example of overriding settings on a per-user basis
#Match User anoncvs
#	X11Forwarding no
#	AllowTcpForwarding no
#	PermitTTY no
#	ForceCommand cvs server

# // Access Control List (ACL)

# // SSH definitive 2nd P/205
# // account access control
# // AllowUsers is cumulative
# // A single AllowUsers keyword in the configuration file cuts
# // off SSH access for all other accounts not mentioned. If the
# //  configuration file has no AllowUsers keywords, the server’s 
# // AllowUsers list is empty, and connections are permissible to 
# //all accounts.
# // For OpenSSH, wildcard characters are acceptable in AllowUsers 
# // and DenyUsers argu- ments.
# // if any restriction prevents access, such as the DenyUsers 
# // line shown, access is denied. Access is granted only if there 
# // are no restrictions against it.
# AllowUsers wning
# this blocked all the users except for wning (even if it is not 
# an existing user!)
# debug1: PAM: password authentication failed for an illegal user: authentication error

# // P211 separates multiple groups with whitespace. 
# // ==recommended==
# // P/420
# *use group ssh to provide another layer of authentication
# CA uses developers group to achieve the same result
# AllGroups ssh
# note that ssh or developers is not standard unix system groups, 
# which prevent sys acounts like sys, bin or daemon from login
# (safer)
AllowGroups developers supports

# AllowHosts 10.0.0.1

# // P215 chroot
# // The Unix system call chroot causes a process (and any subprocesses) 
# // to treat a given directory as the root directory. After chroot, 
# // absolute filenames beginning with “/” actually refer to subdirectories 
# // of the given directory. Access is effectively restricted to the 
# // given directory, because it is impossible to name files outside.'




